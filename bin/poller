#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__),'..','boot')

module Chopper
  class Poller
    def initialize
      @hostname = 'datafeeds.networkrail.co.uk'
      @username = ENV['NROD_USERNAME']
      @password = ENV['NROD_PASSWORD']
    end

    def run
      begin
        client_headers = {
          'accept-version' => '1.1',
          'heart-beat' => '5000,10000',
          'client-id' => Socket.gethostname,
          'host' => @hostname,
          'reliable' => true,
          'parse_timeout' => 5,
          'initial_reconnect_delay' => 2
        }
        client_hash = {
          :hosts => [
            {
              :login => @username,
              :passcode => @password,
              :host => @hostname,
              :port => 61618
            }
          ],
          :connect_headers => client_headers
        }
        puts client_hash.inspect
        client = Stomp::Client.new(client_hash)

        raise 'Connection failed' unless client.open?
        raise "Connect error: #{client.connection_frame().body}" if client.connection_frame().command == Stomp::CMD_ERROR
        raise "Unexpected protocol level #{client.protocol}" unless client.protocol == Stomp::SPL_11

        puts "Connected to #{client.connection_frame().headers['server']} server with STOMP #{client.connection_frame().headers['version']}"

        Chopper::PollerConfig.where(:enabled => true).each do |poller|
          client.subscribe("/topic/#{poller.topic_name}", { 'id' => client.uuid(), 'ack' => 'client', 'activemq.subscriptionName' => Socket.gethostname + poller.topic_name }) do |msg|
            poller.add_stomp_message(:timestamp => Time.now.utc, :message => msg.body)
            client.acknowledge(msg, msg.headers)
            puts "#{Time.now}: ACK #{poller.topic_name} message"
          end
        end

        client.join
        client.close
      end
    end
  end
end

Chopper::Poller.new.run
